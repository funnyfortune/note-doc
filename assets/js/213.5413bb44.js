(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{532:function(e,t,r){"use strict";r.r(t);var a=r(6),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"spring-cloud-gateway-内置的全局过滤器-global-filters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway-内置的全局过滤器-global-filters"}},[e._v("#")]),e._v(" Spring Cloud Gateway 内置的全局过滤器（Global Filters）")]),e._v(" "),t("p",[e._v("本文基于 Spring Cloud Greenwich SR2")]),e._v(" "),t("p",[e._v("原文链接：https://www.jianshu.com/p/3ab97acf1e69")]),e._v(" "),t("p",[e._v("这里将 Spring Cloud Gateway 内置的所有全局过滤器简单整理成了一张表格，用作速览：")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("全局过滤器")]),e._v(" "),t("th",[e._v("作用")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("Forward Routing Filter")]),e._v(" "),t("td",[e._v("用于本地 forward，也就是将请求在 Gateway 服务内进行转发，而不是转发到下游服务")])]),e._v(" "),t("tr",[t("td",[e._v("LoadBalancerClient Filter")]),e._v(" "),t("td",[e._v("整合 Ribbon 实现负载均衡")])]),e._v(" "),t("tr",[t("td",[e._v("Netty Routing Filter")]),e._v(" "),t("td",[e._v("使用 Netty 的 "),t("code",[e._v("HttpClient")]),e._v(" 转发 http、https 请求")])]),e._v(" "),t("tr",[t("td",[e._v("Netty Write Response Filter")]),e._v(" "),t("td",[e._v("将代理响应写回网关的客户端侧")])]),e._v(" "),t("tr",[t("td",[e._v("RouteToRequestUrl Filter")]),e._v(" "),t("td",[e._v("将从 request 里获取的原始 url 转换成 Gateway 进行请求转发时所使用的 url")])]),e._v(" "),t("tr",[t("td",[e._v("Websocket Routing Filter")]),e._v(" "),t("td",[e._v("使用 Spring Web Socket 将转发 Websocket 请求")])]),e._v(" "),t("tr",[t("td",[e._v("Gateway Metrics Filter")]),e._v(" "),t("td",[e._v("整合监控相关，提供监控指标")])])])]),e._v(" "),t("h3",{attrs:{id:"_1、combined-global-filter-and-gatewayfilter-ordering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、combined-global-filter-and-gatewayfilter-ordering"}},[e._v("#")]),e._v(" 1、Combined Global Filter and GatewayFilter Ordering")]),e._v(" "),t("p",[e._v("当 Gateway 接收到请求时，Filtering Web Handler 处理器会将所有的 "),t("code",[e._v("GlobalFilter")]),e._v(" 实例以及所有路由上所配置的 "),t("code",[e._v("GatewayFilter")]),e._v(" 实例添加到一条过滤器链中。该过滤器链里的所有过滤器都会按照 "),t("code",[e._v("org.springframework.core.Ordered")]),e._v(" 注解所指定的数字大小进行排序。")]),e._v(" "),t("p",[e._v("Spring Cloud Gateway 区分了过滤器逻辑执行的 ”pre” 和 ”post” 阶段，所以优先级高的过滤器将会在 “pre” 阶段最先执行，优先级最低的过滤器则在 “post” 阶段最后执行。")]),e._v(" "),t("p",[e._v("**Tips：**数字越小越靠前执行，记得这一点就 OK 了")]),e._v(" "),t("p",[e._v("代码示例：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Bean\n@Order(-1)\npublic GlobalFilter a() {\n    return (exchange, chain) -> {\n        log.info("first pre filter");\n        return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n            log.info("third post filter");\n        }));\n    };\n}\n\n@Bean\n@Order(0)\npublic GlobalFilter b() {\n    return (exchange, chain) -> {\n        log.info("second pre filter");\n        return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n            log.info("second post filter");\n        }));\n    };\n}\n\n@Bean\n@Order(1)\npublic GlobalFilter c() {\n    return (exchange, chain) -> {\n        log.info("third pre filter");\n        return chain.filter(exchange).then(Mono.fromRunnable(() -> {\n            log.info("first post filter");\n        }));\n    };\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br")])]),t("p",[e._v("执行结果：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("first pre filter\nsecond pre filter\nthird pre filter\nfirst post filter\nsecond post filter\nthird post filter\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h3",{attrs:{id:"_2、forward-routing-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、forward-routing-filter"}},[e._v("#")]),e._v(" 2、Forward Routing Filter")]),e._v(" "),t("p",[e._v("简单来说这个 Filter 是用来做本地 forward 的，将官方文档的描述翻译后大致如下：")]),e._v(" "),t("p",[e._v("当请求进来时，"),t("code",[e._v("ForwardRoutingFilter")]),e._v(" 会查看一个 URL，该 URL 为 exchange 属性 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 的值，如果该 url 的 scheme 是 "),t("code",[e._v("forward")]),e._v("（例如："),t("code",[e._v("forward://localendpoint")]),e._v("），那么该 Filter 会使用 Spirng 的 "),t("code",[e._v("DispatcherHandler")]),e._v(" 来处理这个请求。该请求的 URL 路径部分，会被 forward URL 中的路径覆盖掉。而未修改过的原始 URL，会被追加到 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR")]),e._v(" 属性中")]),e._v(" "),t("p",[e._v("注：所谓 url scheme 简单来说就是 url 中的协议部分，例如 http、https、ws 等。自定义的 scheme 通常用于标识该 url 的行为，例如 app 开发中通常使用 url scheme 来跳转页面")]),e._v(" "),t("p",[t("strong",[e._v("Tips：")])]),e._v(" "),t("ul",[t("li",[e._v("这段文档实际上是描述了该 Filter 的实现原理，对使用者来说意义不大，对实现原理感兴趣的话可以直接查看源码，源码比文档描述好理解："),t("code",[e._v("org.springframework.cloud.gateway.filter.ForwardRoutingFilter")])])]),e._v(" "),t("h3",{attrs:{id:"_3、loadbalancerclient-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、loadbalancerclient-filter"}},[e._v("#")]),e._v(" 3、LoadBalancerClient Filter")]),e._v(" "),t("p",[e._v("这个 Filter 是用来整合 Ribbon 的，其核心就是解析 scheme 为"),t("code",[e._v("lb")]),e._v("的 url，以此获取微服务的名称，然后再通过 Ribbon 获取实际的调用地址。将官方文档的描述翻译后大致如下：")]),e._v(" "),t("p",[e._v("当请求进来时，"),t("code",[e._v("LoadBalancerClientFilter")]),e._v(" 会查看一个 URL，该 URL 为 exchange 的属性 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 的值，如果该 url 的 scheme 是 "),t("code",[e._v("lb")]),e._v("，（例如："),t("code",[e._v("lb://myservice")]),e._v(" ），那么该 Filter 会使用 Spring Cloud 的 "),t("code",[e._v("LoadBalancerClient")]),e._v(" 来将 "),t("code",[e._v("myservice")]),e._v(" 解析成实际的 host 和 port ，并替换掉原本 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 属性的值。而原始 url 会追加到 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR")]),e._v(" 属性中。该过滤器还会查看 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR")]),e._v(" 属性，如果发现该属性的值是 "),t("code",[e._v("lb")]),e._v(" ，也会执行相同逻辑。")]),e._v(" "),t("p",[e._v("配置示例：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  cloud:\n    gateway:\n      routes:\n      - id: myRoute\n        uri: lb://service\n        predicates:\n        - Path=/service/**\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("默认情况下，如果无法通过 "),t("code",[e._v("LoadBalancer")]),e._v(" 找到指定服务的实例，那么会返回 503（如上配置示例， 若 "),t("code",[e._v("LoadBalancer")]),e._v(" 找不到名为 service 的实例时，就会返回 503）；可使用配置： "),t("code",[e._v("spring.cloud.gateway.loadbalancer.use404=true")]),e._v(" ，让其返回 404。")]),e._v(" "),t("p",[t("code",[e._v("LoadBalancer")]),e._v(" 返回的 "),t("code",[e._v("ServiceInstance")]),e._v(" 的 "),t("code",[e._v("isSecure")]),e._v(" 的值，会覆盖请求的 scheme。举个例子，如果请求打到 Gateway 上使用的是 HTTPS ，但 "),t("code",[e._v("ServiceInstance")]),e._v(" 的 "),t("code",[e._v("isSecure")]),e._v(" 是"),t("code",[e._v("false")]),e._v("，那么下游微服务接收到的则是 HTTP 请求，反之亦然。另外，如果该路由指定了 "),t("code",[e._v("GATEWAY_SCHEME_PREFIX_ATTR")]),e._v(" 属性，那么前缀将会被剥离，并且路由 URL 中的 scheme 会覆盖 "),t("code",[e._v("ServiceInstance")]),e._v(" 的配置")]),e._v(" "),t("p",[t("strong",[e._v("Tips：")])]),e._v(" "),t("ul",[t("li",[e._v("这段文档实际上是描述了该 Filter 的实现原理，对使用者来说意义不大，对实现原理感兴趣的话可以直接查看源码，源码比文档描述好理解："),t("code",[e._v("org.springframework.cloud.gateway.filter.LoadBalancerClientFilter")])])]),e._v(" "),t("h3",{attrs:{id:"_4、netty-routing-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、netty-routing-filter"}},[e._v("#")]),e._v(" 4、Netty Routing Filter")]),e._v(" "),t("p",[e._v("当请求进来时，"),t("code",[e._v("NettyRoutingFilter")]),e._v(" 会查看一个 URL，该 URL 是 exchange 的属性 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 的值，如果该 url 的 scheme 是 "),t("code",[e._v("http")]),e._v(" 或 "),t("code",[e._v("https")]),e._v(" ，那么该 Filter 会使用 Netty 的 "),t("code",[e._v("HttpClient")]),e._v(" 向下游的服务发送代理请求。获得的响应将放在 exchange 的 "),t("code",[e._v("ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR")]),e._v(" 属性中，以便在后面的 Filter 里使用。（有一个实验性的过滤器： "),t("code",[e._v("WebClientHttpRoutingFilter")]),e._v(" 可实现相同功能，但无需 Netty）")]),e._v(" "),t("h3",{attrs:{id:"_5、netty-write-response-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、netty-write-response-filter"}},[e._v("#")]),e._v(" 5、Netty Write Response Filter")]),e._v(" "),t("p",[t("code",[e._v("NettyWriteResponseFilter")]),e._v(" 用于将代理响应写回网关的客户端侧，所以该过滤器会在所有其他过滤器执行完成后才执行，并且执行的条件是 exchange 中 "),t("code",[e._v("ServerWebExchangeUtils.CLIENT_RESPONSE_CONN_ATTR")]),e._v(" 属性的值不为空，该值为 Netty 的 "),t("code",[e._v("Connection")]),e._v(" 实例。（有一个实验性的过滤器： "),t("code",[e._v("WebClientWriteResponseFilter")]),e._v(" 可实现相同功能，但无需 Netty）")]),e._v(" "),t("h3",{attrs:{id:"_6、routetorequesturl-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、routetorequesturl-filter"}},[e._v("#")]),e._v(" 6、RouteToRequestUrl Filter")]),e._v(" "),t("p",[e._v("这个过滤器用于将从 request 里获取的原始 url 转换成 Gateway 进行请求转发时所使用的 url。当请求进来时，"),t("code",[e._v("RouteToRequestUrlFilter")]),e._v(" 会从 exchange 中获取 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR")]),e._v(" 属性的值，该值是一个 "),t("code",[e._v("Route")]),e._v(" 对象。若该对象不为空的话，"),t("code",[e._v("RouteToRequestUrlFilter")]),e._v(" 会基于请求 URL 及 "),t("code",[e._v("Route")]),e._v(" 对象里的 URL 来创建一个新的 URL。新 URL 会被放到 exchange 的 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 属性中。")]),e._v(" "),t("p",[e._v("可能有点抽象，我们 debug 一下，看看这三个 url 的值就明白了，如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://cdn.jayh.club/uPic/19037705-c26520b6707d811bMcBvAK.png",alt:"img"}})]),e._v(" "),t("p",[e._v("image.png")]),e._v(" "),t("p",[e._v("如果 URL 具有 scheme 前缀，例如 "),t("code",[e._v("lb:ws://serviceid")]),e._v(" ，该 "),t("code",[e._v("lb")]),e._v(" scheme 将从 URL 中剥离，并放到 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR")]),e._v(" 中，方便后面的过滤器使用。")]),e._v(" "),t("h3",{attrs:{id:"_7、websocket-routing-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、websocket-routing-filter"}},[e._v("#")]),e._v(" 7、Websocket Routing Filter")]),e._v(" "),t("p",[e._v("该过滤器的作用与 "),t("code",[e._v("NettyRoutingFilter")]),e._v(" 类似。当请求进来时，"),t("code",[e._v("WebsocketRoutingFilter")]),e._v(" 会查看一个 URL，该 URL 是 exchange 中 "),t("code",[e._v("ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR")]),e._v(" 属性的值，如果该 url 的 scheme 是 "),t("code",[e._v("ws")]),e._v(" 或者 "),t("code",[e._v("wss")]),e._v("，那么该 Filter 会使用 Spring Web Socket 将 Websocket 请求转发到下游。")]),e._v(" "),t("p",[e._v("另外，如果 Websocket 请求需要负载均衡的话，可为 URL 添加 "),t("code",[e._v("lb")]),e._v(" 前缀以实现负载均衡，例如 "),t("code",[e._v("lb:ws://serviceid")]),e._v(" 。")]),e._v(" "),t("p",[e._v("如果你使用 "),t("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsockjs",target:"_blank",rel:"noopener noreferrer"}},[e._v("SockJS"),t("OutboundLink")],1),e._v(" 作为普通 http 的后备，则应配置正常的 HTTP 路由以及 Websocket 路由。")]),e._v(" "),t("p",[e._v("配置示例：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring:\n  cloud:\n    gateway:\n      routes:\n      # SockJS route\n      - id: websocket_sockjs_route\n        uri: http://localhost:3001\n        predicates:\n        - Path=/websocket/info/**\n      # Normwal Websocket route\n      - id: websocket_route\n        uri: ws://localhost:3001\n        predicates:\n        - Path=/websocket/**\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("h3",{attrs:{id:"_8、gateway-metrics-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、gateway-metrics-filter"}},[e._v("#")]),e._v(" 8、Gateway Metrics Filter")]),e._v(" "),t("p",[e._v("想要启用 Gateway Metrics Filter，需在项目中添加 "),t("code",[e._v("spring-boot-starter-actuator")]),e._v(" 依赖，然后在配置文件中配置 "),t("code",[e._v("spring.cloud.gateway.metrics.enabled")]),e._v(" 的值为"),t("code",[e._v("true")]),e._v("。该过滤器会添加名为 "),t("code",[e._v("gateway.requests")]),e._v(" 的时序度量（timer metric），其中包含以下标记：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("routeId")]),e._v("：路由 ID")]),e._v(" "),t("li",[t("code",[e._v("routeUri")]),e._v("：API 将路由到的 URI")]),e._v(" "),t("li",[t("code",[e._v("outcome")]),e._v("：由 "),t("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.spring.io%2Fspring-framework%2Fdocs%2Fcurrent%2Fjavadoc-api%2Forg%2Fspringframework%2Fhttp%2FHttpStatus.Series.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HttpStatus.Series"),t("OutboundLink")],1),e._v(" 分类")]),e._v(" "),t("li",[t("code",[e._v("status")]),e._v("：返回给客户端的 Http Status")]),e._v(" "),t("li",[t("code",[e._v("httpStatusCode")]),e._v("：返回给客户端的请求的 Http Status")]),e._v(" "),t("li",[t("code",[e._v("httpMethod")]),e._v("：请求所使用的 Http 方法")])]),e._v(" "),t("p",[e._v("这些指标暴露在 "),t("code",[e._v("/actuator/metrics/gateway.requests")]),e._v(" 端点中，并且可以轻松与 Prometheus 整合，从而创建一个 "),t("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fcloud.spring.io%2Fspring-cloud-gateway%2Freference%2Fhtml%2Fgateway-grafana-dashboard.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("Grafana dashboard"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("注：Prometheus 是一款监控工具，Grafana 是一款监控可视化工具；Spring Boot Actuator 可与这两款工具进行整合。")]),e._v(" "),t("h3",{attrs:{id:"_9、marking-an-exchange-as-routed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、marking-an-exchange-as-routed"}},[e._v("#")]),e._v(" 9、Marking An Exchange As Routed")]),e._v(" "),t("p",[e._v("当一个请求走完整条过滤器链后，负责转发请求到下游的那个过滤器会在 exchange 中添加一个 "),t("code",[e._v("gatewayAlreadyRouted")]),e._v(" 属性，从而将 exchange 标记为 "),t("code",[e._v("routed")]),e._v("（已路由）。一旦请求被标记为 "),t("code",[e._v("routed")]),e._v(" ，其他路由过滤器将不会再次路由该请求，而是直接跳过。")]),e._v(" "),t("p",[e._v("了解了以上所有内置的全局过滤器后，我们知道不同协议的请求会由不同的过滤器转发到下游。所以负责添加这个"),t("code",[e._v("gatewayAlreadyRouted")]),e._v(" 属性的过滤器就是最终负责转发请求的过滤器：")]),e._v(" "),t("ul",[t("li",[e._v("http、https 请求会由"),t("code",[e._v("NettyRoutingFilter")]),e._v("或"),t("code",[e._v("WebClientHttpRoutingFilter")]),e._v("添加这个属性")]),e._v(" "),t("li",[e._v("forward 请求会由"),t("code",[e._v("ForwardRoutingFilter")]),e._v("添加这个属性")]),e._v(" "),t("li",[e._v("websocket 请求会由"),t("code",[e._v("WebsocketRoutingFilter")]),e._v("添加这个属性")])]),e._v(" "),t("p",[e._v("这些过滤器调用了以下方法将 exchange 标记为 "),t("code",[e._v("routed")]),e._v(" ，或检查 exchange 是否是 "),t("code",[e._v("routed")]),e._v("：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ServerWebExchangeUtils.isAlreadyRouted")]),e._v("：检查 exchange 是否为 routed 状态")]),e._v(" "),t("li",[t("code",[e._v("ServerWebExchangeUtils.setAlreadyRouted")]),e._v("：将 exchange 设置为 routed 状态")])]),e._v(" "),t("p",[e._v("简单来说，就是 Gateway 通过 "),t("code",[e._v("gatewayAlreadyRouted")]),e._v(" 属性表示这个请求已经转发过了，而无需其他过滤器重复路由，从而防止重复的路由转发。")]),e._v(" "),t("p",[e._v("这些全局过滤器都有对应的配置类，感兴趣的话可以查看相关源码：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("org.springframework.cloud.gateway.config.GatewayAutoConfiguration")])]),e._v(" "),t("li",[t("code",[e._v("org.springframework.cloud.gateway.config.GatewayMetricsAutoConfiguration")])]),e._v(" "),t("li",[t("code",[e._v("org.springframework.cloud.gateway.config.GatewayLoadBalancerClientAutoConfiguration")])])]),e._v(" "),t("p",[e._v("官方文档：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fcloud.spring.io%2Fspring-cloud-static%2FGreenwich.SR2%2Fsingle%2Fspring-cloud.html%23_global_filters",target:"_blank",rel:"noopener noreferrer"}},[e._v("Global Filters"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);